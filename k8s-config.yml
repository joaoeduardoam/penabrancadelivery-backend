##

apiVersion: v1
kind: Secret
metadata:
  name: secret
type: Opaque
data:
  mysql-password: bXlzcWw= # password must be in base64
  mail-password: d2NjaCB5a3Z1IHRtbmogbG5idw==
  client-secret: OWI5NmIxMmVjMmMxOWQ5NmQ0OTJkYTRmYjJlODM4N2Y2OTQ1YTFmNg==

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-map
data:
  spring-datasource-url: "jdbc:mysql://mysql/penabranca?createDatabaseIfNotExist=true"
  mail-user: jeduardo.meneses.teste@gmail.com
  client-id: Client_Id_8b49bdb9f64a1431ba405309a5c30031580322cb

---


apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain # default value is Delete
volumeBindingMode: WaitForFirstConsumer

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: local-storage
  capacity:
    storage: 256Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  local:
    path: "/db-penabranca" # Directory must be created in the cluster k8s node ... name node must be setted in the field below
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - k3d-meucluster-server-0  # name of the node in the cluster k8s

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  storageClassName: local-storage
  volumeName: mysql-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi


---


apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deploy
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql-container
          image: mysql
          ports:
            - containerPort: 3306
          env:
            # Define as variáveis de ambiente
            - name: MYSQL_ROOT_PASSWORD # Note que aqui a variável está definida em caixa alta, diferente da chave no ConfigMap.
              valueFrom:
                secretKeyRef:
                  name: secret         # Nome do Secret de onde esse valor vem.
                  key: mysql-password

          volumeMounts:
            - name: storage
              mountPath: /var/lib/mysql
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: mysql-pvc

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: penabrancadelivery-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: penabrancadelivery-backend
  template:
    metadata:
      labels:
        app: penabrancadelivery-backend
    spec:
      containers:
        - name: container-penabrancadelivery-backend
          image: joaoeduardoam/penabrancadelivery-backend:1.0
          ports:
            - containerPort: 8080
          env:
            # Define as variáveis de ambiente
            - name: SPRING_DATASOURCE_URL # Note que aqui a variável está definida em caixa alta,
              valueFrom:
                configMapKeyRef:
                  name:   config-map         # O ConfigMap de onde esse valor vem.
                  key: spring-datasource-url
            - name: MAIL_USER # Note que aqui a variável está definida em caixa alta, diferente da chave no ConfigMap.
              valueFrom:
                configMapKeyRef:
                  name: config-map         # O ConfigMap de onde esse valor vem.
                  key: mail-user
            - name: MAIL_PASSWORD # Note que aqui a variável está definida em caixa alta, diferente da chave no ConfigMap.
              valueFrom:
                secretKeyRef:
                  name: secret         # Nome do Secret de onde esse valor vem.
                  key: mail-password
            - name: CLIENT_ID # Note que aqui a variável está definida em caixa alta, diferente da chave no ConfigMap.
              valueFrom:
                configMapKeyRef:
                  name: config-map         # O ConfigMap de onde esse valor vem.
                  key: client-id
            - name: CLIENT_SECRET # Note que aqui a variável está definida em caixa alta, diferente da chave no ConfigMap.
              valueFrom:
                secretKeyRef:
                  name: secret         # Nome do Secret de onde esse valor vem.
                  key: client-secret

---

apiVersion: v1
kind: Service
metadata:
  name: penabrancadelivery-backend-service
spec:
  selector:
    app: penabrancadelivery-backend
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30001
  type: NodePort